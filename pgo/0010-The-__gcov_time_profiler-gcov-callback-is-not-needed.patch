From 1c7ad0c60091896529985ec4158a066862687019 Mon Sep 17 00:00:00 2001
From: Jarmo Tiitto <jarmo.tiitto@gmail.com>
Date: Sat, 3 Jun 2017 21:31:19 +0300
Subject: [PATCH 10/21] The __gcov_time_profiler gcov callback is not needed
 for GCC 7.1 so it was removed. Tuned GCC PGO optimization options more.

---
 Makefile           | 30 +++++++------------
 buildGCOVKernel    |  4 +--
 kernel/gcov/base.c | 72 +++++++++++++++++++---------------------------
 3 files changed, 42 insertions(+), 64 deletions(-)

diff --git a/Makefile b/Makefile
index c4b8e859c6f3..871071ad87ba 100644
--- a/Makefile
+++ b/Makefile
@@ -403,7 +403,9 @@ CFLAGS_GCOV	= -fprofile-generate=/tmp/kernelPGO -fprofile-update=atomic \
 		-finline-functions -fprofile-reorder-functions \
 		-freorder-blocks-and-partition -fipa-profile -fvpt \
 		-fipa-cp -fipa-cp-clone -fipa-pta -fpeel-loops \
-		-ftree-partial-pre -fno-tree-loop-im
+		-ftree-partial-pre \
+		-fschedule-insns -fsched-pressure -fgraphite \
+		-fsched-stalled-insns=4 -fsched-stalled-insns-dep=32
 
 
 # Use USERINCLUDE when you must reference the UAPI directories only.
@@ -431,15 +433,6 @@ KBUILD_CFLAGS   := -Wall -Wundef -Wstrict-prototypes -Wno-trigraphs \
 		   -std=gnu89
 KBUILD_CPPFLAGS := -D__KERNEL__
 
-# Enable GCC PGO optimizations if requested.
-ifdef CONFIG_GCOV_PGO_ENABLE
-KBUILD_CFLAGS	+= -finline-functions -fprofile-reorder-functions \
-		   -fprofile-use=/tmp/kernelPGO -fprofile-correction \
-		   -fprofile-dir=/tmp/kernelPGO \
-		   -Wcoverage-mismatch -Wno-error=coverage-mismatch \
-		   -fno-tree-vectorize -fno-tree-loop-im
-endif
-
 ifdef CONFIG_GCOV_KERNEL
     LDFLAGS_MODULE	+= $(call cc-option,-fprofile-generate) \
 			$(call cc-option,-fprofile-update=atomic)
@@ -691,16 +684,15 @@ KBUILD_CFLAGS   += -O2
 endif
 endif
 
-# Enable GCC PGO optimizations if madly requested.
-# PGO can easily break the kernel and you have been warned.
+# Enable GCC PGO + some additional optimizations if requested.
 ifdef CONFIG_GCOV_PGO_ENABLE
-KBUILD_CFLAGS	+= -finline-functions -fprofile-reorder-functions \
-		   -freorder-blocks-and-partition -fprofile-values \
-		   -fprofile-use=/tmp/kernelPGO -fprofile-correction \
-		   -fprofile-dir=/tmp/kernelPGO -fipa-profile -fvpt \
-		   -Wcoverage-mismatch -Wno-error=coverage-mismatch \
-		   -fipa-cp -fipa-cp-clone -fipa-pta -fpeel-loops \
-		   -ftree-partial-pre -fno-tree-loop-im
+KBUILD_CFLAGS	+= -fprofile-use=/tmp/kernelPGO -fprofile-dir=/tmp/kernelPGO \
+		-finline-functions -fprofile-reorder-functions -fprofile-values \
+		-freorder-blocks-and-partition -fipa-profile -fvpt \
+		-fipa-cp -fipa-cp-clone -fipa-pta -fpeel-loops \
+		-ftree-partial-pre \
+		-fschedule-insns -fsched-pressure -fgraphite \
+		-fsched-stalled-insns=4 -fsched-stalled-insns-dep=32
 endif
 
 KBUILD_CFLAGS += $(call cc-ifversion, -lt, 0409, \
diff --git a/buildGCOVKernel b/buildGCOVKernel
index eaf0f0ae7b9a..6d0c08598c11 100755
--- a/buildGCOVKernel
+++ b/buildGCOVKernel
@@ -32,8 +32,8 @@ if [ $? -eq 0 ]; then
     echo 'Kernel build okay!'
     echo 'Collecting GCNO profile files..'
     ./gathergcno.sh gcnoprofile.tar.gz
-exit 0
+    exit 0
 else
     echo 'Kernel build failed. Stop.'
-    exit 1;
+    exit 2;
 fi
diff --git a/kernel/gcov/base.c b/kernel/gcov/base.c
index 9c5761081843..7520d706ca56 100644
--- a/kernel/gcov/base.c
+++ b/kernel/gcov/base.c
@@ -109,7 +109,6 @@ EXPORT_SYMBOL(__gcov_merge_time_profile);
  */
 static atomic_t __gcov_lock_mtx = { 0 };
 
-
 static inline int __gcov_try_lock(void)
 {
 	return atomic_cmpxchg(&__gcov_lock_mtx, 0, 1) == 0;
@@ -123,27 +122,27 @@ static inline void __gcov_unlock(void)
 static inline void __gcov_one_value_profiler_body(gcov_type *counters,
 						  gcov_arg value)
 {
-	if(__gcov_try_lock()) {
-		gcov_arg val = GCOV_COUNTER_READ(counters+1);
-		gcov_arg tst = GCOV_COUNTER_READ(counters);
-		if( tst == value) {
-			GCOV_COUNTER_INC(counters+1);
-		} else if (val == 0) {
-			GCOV_COUNTER_SET(counters+1, 1);
-			GCOV_COUNTER_SET(counters, value);
-		} else {
-			GCOV_COUNTER_DEC(counters+1);
-		}
-		GCOV_COUNTER_INC(counters+2);
-		__gcov_unlock();
+	gcov_arg val = GCOV_COUNTER_READ(counters+1);
+	gcov_arg tst = GCOV_COUNTER_READ(counters);
+	if( tst == value) {
+		GCOV_COUNTER_INC(counters+1);
+	} else if (val == 0) {
+		GCOV_COUNTER_SET(counters+1, 1);
+		GCOV_COUNTER_SET(counters, value);
+	} else {
+		GCOV_COUNTER_DEC(counters+1);
 	}
+	GCOV_COUNTER_INC(counters+2);
 }
 
 void __gcov_indirect_call_profiler(gcov_type *counter, gcov_arg value,
 				   void *cur_func, void *callee_func)
 {
-	if (cur_func == callee_func)
-		__gcov_one_value_profiler_body(counter, value);
+	if(__gcov_try_lock()) {
+		if (cur_func == callee_func)
+			__gcov_one_value_profiler_body(counter, value);
+		__gcov_unlock();
+	}
 }
 EXPORT_SYMBOL(__gcov_indirect_call_profiler);
 
@@ -154,37 +153,18 @@ EXPORT_SYMBOL(__gcov_indirect_call_counters);
 
 void __gcov_indirect_call_profiler_v2(gcov_arg value, void *cur_func)
 {
-	if (cur_func == __gcov_indirect_call_callee)
-		__gcov_one_value_profiler_body(__gcov_indirect_call_counters,
-						value);
+	if(__gcov_try_lock()) {
+		if (cur_func == __gcov_indirect_call_callee)
+			__gcov_one_value_profiler_body(__gcov_indirect_call_counters,
+							value);
+		__gcov_unlock();
+	}
 }
 EXPORT_SYMBOL(__gcov_indirect_call_profiler_v2);
 
-static gcov_type function_counter = { 0 };
 gcov_arg __gcov_time_profiler_counter = { 0 };
 EXPORT_SYMBOL(__gcov_time_profiler_counter);
 
-void __gcov_time_profiler(gcov_type *counters)
-{
-	if(__gcov_try_lock()) {
-		gcov_arg fcnt = GCOV_COUNTER_READ(&function_counter);
-		gcov_arg tst = GCOV_COUNTER_READ(counters);
-		if(!tst) {
-			if(GCOV_COUNTER_CMPXCHG(counters, tst, fcnt + 1) == tst)
-				GCOV_COUNTER_INC(&function_counter);
-		}
-		__gcov_unlock();
-	}
-}
-EXPORT_SYMBOL(__gcov_time_profiler);
-
-/* atomic variant export */
-void __gcov_time_profiler_atomic(gcov_type *counters)
-{
-	__gcov_time_profiler(counters);
-}
-EXPORT_SYMBOL(__gcov_time_profiler_atomic);
-
 void __gcov_ior_profiler(gcov_type *counters, gcov_arg value)
 {
 	if(__gcov_try_lock()) {
@@ -220,14 +200,20 @@ EXPORT_SYMBOL(__gcov_average_profiler_atomic);
 
 void __gcov_one_value_profiler(gcov_type *counters, gcov_arg value)
 {
-	__gcov_one_value_profiler_body(counters, value);
+	if(__gcov_try_lock()) {
+		__gcov_one_value_profiler_body(counters, value);
+		__gcov_unlock();
+	}
 }
 EXPORT_SYMBOL(__gcov_one_value_profiler);
 
 /* atomic variant export */
 void __gcov_one_value_profiler_atomic(gcov_type *counters, gcov_arg value)
 {
-	__gcov_one_value_profiler_body(counters, value);
+	if(__gcov_try_lock()) {
+		__gcov_one_value_profiler_body(counters, value);
+		__gcov_unlock();
+	}
 }
 EXPORT_SYMBOL(__gcov_one_value_profiler_atomic);
 
-- 
2.19.2

